"use strict";(self.webpackChunkgithub_page=self.webpackChunkgithub_page||[]).push([[6893],{8570:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(79);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),y=l(n),f=a,d=y["".concat(p,".").concat(f)]||y[f]||c[f]||o;return n?r.createElement(d,s(s({ref:t},u),{},{components:n})):r.createElement(d,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},5856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(9675),a=(n(79),n(8570));const o={title:"Assertion Function",authors:["unional"],tags:["typescript","type-plus"]},s=void 0,i={unversionedId:"typescript_features/assertion_funtion",id:"typescript_features/assertion_funtion",title:"Assertion Function",description:"Assertion Functions are special functions that asserts certain conditions of your program.",source:"@site/docs/typescript_features/assertion_funtion.mdx",sourceDirName:"typescript_features",slug:"/typescript_features/assertion_funtion",permalink:"/typescript-blackbook/docs/typescript_features/assertion_funtion",draft:!1,editUrl:"https://github.com/unional/typescript-guidelines/tree/main/github-page/docs/typescript_features/assertion_funtion.mdx",tags:[{label:"typescript",permalink:"/typescript-blackbook/docs/tags/typescript"},{label:"type-plus",permalink:"/typescript-blackbook/docs/tags/type-plus"}],version:"current",frontMatter:{title:"Assertion Function",authors:["unional"],tags:["typescript","type-plus"]},sidebar:"tutorialSidebar",previous:{title:"Declaration Map",permalink:"/typescript-blackbook/docs/tsconfig/declaration_map"}},p={},l=[],u={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions"},"Assertion Functions")," are special functions that asserts certain conditions of your program."),(0,a.kt)("p",null,"It is introduced in TypeScript 3.7."),(0,a.kt)("p",null,"They throw an error if the condition is not met, and return nothing otherwise."),(0,a.kt)("p",null,"Furthermore, the ",(0,a.kt)("em",{parentName:"p"},"assertion signature")," provides additional information to the compiler,\nso that the type can be narrowed down."),(0,a.kt)("p",null,"Here is a simple example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function assertIsString(value: unknown): asserts value is string {\n  if (typeof value !== "string") {\n    throw new TypeError("value must be a string");\n  }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"You ",(0,a.kt)("strong",{parentName:"p"},"can")," throw any type of error.\ni.e. you ",(0,a.kt)("strong",{parentName:"p"},"can")," throw error other than ",(0,a.kt)("inlineCode",{parentName:"p"},"AssertionError"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Why?")),(0,a.kt)("p",null,"While ",(0,a.kt)("inlineCode",{parentName:"p"},"AssertionError")," may work a little better with test runner,\nit is ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/"},"NodeJS")," specific."),(0,a.kt)("p",null,"Meaning your code cannot be used in other environments without polyfills."),(0,a.kt)("hr",null),(0,a.kt)("p",null,"You ",(0,a.kt)("strong",{parentName:"p"},"can")," use ",(0,a.kt)("inlineCode",{parentName:"p"},"assertType")," from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/unional/type-plus"},"type-plus")," for one-off assertion functions (especially if you are already using it)."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Why?")),(0,a.kt)("p",null,"In many cases, you only need to do type assertion for a few specific cases."),(0,a.kt)("p",null,"If you are already using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/unional/type-plus"},"type-plus"),",\nyou can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"assertType()")," generic assertion function so that you don't have to break your flow and add an addition function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { data } = useQuery(...)\n\nassertType<YourData>(data, v => ...predicate...)\n\n// `data` is narrowed to `YourData`\n")),(0,a.kt)("p",null,"It also has additional assertion functions for basic types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"assertType.isUndefined(value)\nassertType.isNull(value)\nassertType.isNumber(value)\nassertType.isString(value)\nassertType.isBoolean(value)\nassertType.isTrue(value)\nassertType.isFalse(value)\nassertType.isFunction(value)\nassertType.isError(value)\nassertType.noUndefined(value)\nassertType.noNull(value)\nassertType.noNumber(value)\nassertType.noString(value)\nassertType.noBoolean(value)\nassertType.noTrue(value)\nassertType.noFalse(value)\nassertType.noFunction(value)\nassertType.noError(value)\n")))}c.isMDXComponent=!0}}]);